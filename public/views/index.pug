extends layout.pug
block content
	div.container
		div.row
			div.col-md-12.mt-3
				a.btn.btn-info(href="/create") Create
				table.table.mt-3
					thead
						tr
							th Todo
							th Parent
							th Action
					tbody
						each task in tasks
							tr
								td= task.todo
								td
									each parent, key in task.parents
										if key == task.parents.length - 1
											= parent.todo
										else
											= parent.todo + ", "
								td
									div.btn-group(role="group")
										a.btn.btn-warning(href="/edit/"+task['@rid'].cluster+"/"+task['@rid'].position) Edit
										a.btn.btn-danger(href="/delete/"+task['@rid'].cluster+"/"+task['@rid'].position) Delete
				div#myDiagramDiv(style="border: solid 1px black; height:400px")
block scripts
	script.
		function init() {
			var _go = go.GraphObject.make;  // for conciseness in defining templates

		    myDiagram = _go(go.Diagram, "myDiagramDiv",  // create a Diagram for the DIV HTML element
		                  {
		                    initialContentAlignment: go.Spot.Center,  // center the content
		                    "undoManager.isEnabled": true  // enable undo & redo
		                  });

		    // define a simple Node template
		    myDiagram.nodeTemplate =
		      _go(go.Node, "Auto",  // the Shape will go around the TextBlock
		        _go(go.Shape, "RoundedRectangle", { strokeWidth: 0},
		          // Shape.fill is bound to Node.data.color
		          new go.Binding("fill", "color")),
		        _go(go.TextBlock,
		          { margin: 8 },  // some room around the text
		          // TextBlock.text is bound to Node.data.key
		          new go.Binding("text", "text"))
		      );

		    // but use the default Link template, by not setting Diagram.linkTemplate

		    // create the model data that will be represented by Nodes and Links
			var tasks = !{JSON.stringify(tasks)};
			var nodes = [], lines = [];
			tasks.forEach((task) => {
				nodes.push({key: task.id, text: task.todo, color: "lightblue"})
				task.parents.forEach((parent) => {
					lines.push({ from: parent.id, to: task.id });
				});
			});

		    myDiagram.model = new go.GraphLinksModel(nodes, lines);
		}

		init();